package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import com.example.jdbcdemo.domain.Procesor;


//import com.example.jdbcdemo.domain.Procesor;

public class ProcesorManager {
	private Connection connection;
	private Statement statement;

	private PreparedStatement addProcesorStmt;
	private PreparedStatement deleteAllProcesorsStmt;
	private PreparedStatement getAllProcesorsStmt;
	private PreparedStatement updateProcesorStmt;
	private PreparedStatement deleteProcesorStmt;
	private PreparedStatement searchProcesorStmt;

	private String createProcesorTable = "CREATE TABLE Procesor(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), serialNumber integer, frequency varchar(20))";

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	public ProcesorManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;

			while (rs.next()) {
				if ("Procesor".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists)
				statement.executeUpdate(createProcesorTable);

			addProcesorStmt = connection
					.prepareStatement("INSERT INTO Procesor (name, serialNumber, frequency) VALUES (?,?,?)");
			getAllProcesorsStmt = connection
					.prepareStatement("SELECT id, name, serialNumber, frequency From Procesor");
			deleteAllProcesorsStmt = connection
					.prepareStatement("DELETE FROM Procesor");
			updateProcesorStmt = connection
					.prepareStatement("UPDATE procesor SET name = ?, frequency = ? WHERE serialNumber = ?");
			deleteProcesorStmt = connection
					.prepareStatement("DELETE FROM Procesor WHERE serialNumber = ?");
			searchProcesorStmt = connection
					.prepareStatement("SELECT id, name, serialNumber, frequency From Procesor WHERE serialNumber = ?");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public int addProcesor(Procesor procesor) {
		int count = 0;
		try {
			addProcesorStmt.setString(1,procesor.getName());
			addProcesorStmt.setInt(2, procesor.getSerialNumber());
			addProcesorStmt.setString(3, procesor.getFrequency());
			count = addProcesorStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;
	}

	public Connection getConnection() {
		return connection;
	}

	public void setConnection(Connection connection) {
		this.connection = connection;
	}

	public void clearProcesors() {
		try {
			deleteAllProcesorsStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public Set<Procesor> getAllProcesors() {
		 Set<Procesor> procesors = new TreeSet<Procesor>();
		//List<Procesor> procesors = new ArrayList<Procesor>();
		try {
			ResultSet rs = getAllProcesorsStmt.executeQuery();
			while (rs.next()) {
				Procesor a = new Procesor();
				a.setId(rs.getInt("id"));
				a.setName(rs.getString("name"));
				a.setSerialNumber(rs.getInt("serialNumber"));
				a.setFrequency(rs.getString("frequency"));
				procesors.add(a);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return procesors;
	}

	public int updateProcesor(Procesor procesor) {
		int count = 0;
		try {
			ResultSet rs = getAllProcesorsStmt.executeQuery();
			while (rs.next()) {
				if(((Integer)rs.getInt("serialNumber")).equals((Integer)procesor.getSerialNumber())){
					updateProcesorStmt.setString(1, procesor.getName());
					updateProcesorStmt.setString(2, procesor.getFrequency());
					updateProcesorStmt.setInt(3, procesor.getSerialNumber());
					count = updateProcesorStmt.executeUpdate();
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;
	}

	public int deleteProcesor(Procesor procesor) {
		int count = 0;
		try {
			ResultSet rs = getAllProcesorsStmt.executeQuery();
			while (rs.next()) {
				if(((Integer)rs.getInt("serialNumber")).equals((Integer)procesor.getSerialNumber())){
					deleteProcesorStmt.setInt(1, procesor.getSerialNumber());
					count = deleteProcesorStmt.executeUpdate();
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;
	}
	
	public int searchProcesor(Procesor procesor) {
		int count = 0;
		try {
			ResultSet rs = getAllProcesorsStmt.executeQuery();
			while (rs.next()) {
				if(((Integer)rs.getInt("serialNumber")).equals((Integer)procesor.getSerialNumber())){
					count++;
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;
	}
}
