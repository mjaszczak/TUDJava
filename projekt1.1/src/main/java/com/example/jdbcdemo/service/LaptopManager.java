package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import com.example.jdbcdemo.domain.Laptop;
import com.example.jdbcdemo.domain.Procesor;

//import com.example.jdbcdemo.domain.Procesor;
//import com.example.jdbcdemo.domain.Laptop;

public class LaptopManager {
	private Connection connection;
	private Statement statement;
	
	private PreparedStatement addLaptopStmt;
	private PreparedStatement updateLaptopToProcesorStmt;
	private PreparedStatement addProcesorStmt;
	private PreparedStatement getAllProcesorsStmt;
	private String createLaptopTable = "CREATE TABLE Laptop(id bigint GENERATED BY DEFAULT AS IDENTITY, brand varchar(20),model varchar(20),hdd integer, ram integer, serialnumber integer)";
	private PreparedStatement getAllLaptopsStmt;
	private PreparedStatement getAllLaptopsAfterStmt;
	private PreparedStatement deleteAllLaptopsStmt;
	private PreparedStatement deleteAllProcesorsStmt;
	private PreparedStatement deleteLaptopStmt;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	public LaptopManager() {
		super();
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null,null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Laptop".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			connection.setAutoCommit(false);
			if (!tableExists)
				statement.executeUpdate(createLaptopTable);
			
			addLaptopStmt = connection.prepareStatement("INSERT INTO Laptop (brand, model, hdd, ram) VALUES (?,?,?,?)");
			updateLaptopToProcesorStmt = connection.prepareStatement("UPDATE Laptop SET serialnumber = ? WHERE ram = ? ");
			addProcesorStmt = connection.prepareStatement("INSERT INTO Procesor (name, serialnumber, frequency) VALUES (?,?,?)");
			getAllProcesorsStmt = connection.prepareStatement("SELECT id, name, serialNumber, frequency From Procesor");
			getAllLaptopsStmt = connection.prepareStatement("SELECT id, brand, model, hdd, ram, serialnumber FROM Laptop");
			getAllLaptopsAfterStmt = connection.prepareStatement("SELECT id, brand, model, hdd, ram, serialnumber FROM Laptop Where ram > ?");
			deleteAllLaptopsStmt = connection.prepareStatement("DELETE FROM Laptop");
			deleteLaptopStmt = connection.prepareStatement("DELETE FROM Laptop WHERE serialnumber = ?");
			deleteAllLaptopsStmt = connection.prepareStatement("DELETE FROM Laptop");
			connection.commit();
			connection.setAutoCommit(true);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int addLaptop(Laptop laptop){
		int count = 0;
		try {
			//connection.setAutoCommit(false);
			addLaptopStmt.setString(1, laptop.getBrand());
			addLaptopStmt.setString(2, laptop.getModel());
			addLaptopStmt.setInt(3, laptop.getHdd());
			addLaptopStmt.setInt(4, laptop.getRam());
			count = addLaptopStmt.executeUpdate();
			//connection.commit();
			//connection.setAutoCommit(true);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return count;
	}
	public void clearLaptops() {
		try {
		//	connection.setAutoCommit(false);
			deleteAllLaptopsStmt.executeUpdate();
			deleteAllProcesorsStmt.executeUpdate();
		//	connection.commit();
		//	connection.setAutoCommit(true);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int countRows(Procesor procesor){
		int count = 0;
		Laptop tmpR = new Laptop();
		try {
			ResultSet rs = getAllLaptopsStmt.executeQuery();
			while (rs.next()){
				tmpR.setSerialNumber(rs.getInt("serialnumber"));
				if(((Integer)tmpR.getSerialNumber()).equals(procesor.getSerialNumber())){
					count++;
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return count;
	}
	
	public Set<Laptop> getAllLaptops() {
		Set<Laptop> resources = new TreeSet<Laptop>();
		try {
			ResultSet rs = getAllLaptopsStmt.executeQuery();
			while (rs.next()){
				Laptop r = new Laptop();
				r.setId(rs.getInt("id"));
				r.setBrand(rs.getString("brand"));
				r.setModel(rs.getString("model"));
				r.setHdd(rs.getInt("hdd"));
				r.setRam(rs.getInt("ram"));
				r.setSerialNumber(rs.getInt("serialnumber"));
				resources.add(r);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return resources;
	}
	
	public int addLaptopToProcesor(Laptop r, Procesor a) {
		int count = 0;
		int resourceExists = 0;
		try {
		connection.setAutoCommit(false);
		ResultSet rsA = getAllLaptopsStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)r.getHdd()).equals((Integer)rsA.getInt("hdd"))){
				resourceExists = 1;
				break;
			}
		}
		if( resourceExists == 1 ){
			ResultSet rs = getAllLaptopsStmt.executeQuery();
			while (rs.next()){
				Procesor tmpA = new Procesor();
				tmpA.setSerialNumber(rs.getInt("serialnumber"));
				if(((Integer)tmpA.getSerialNumber()).equals(a.getSerialNumber())){
					updateLaptopToProcesorStmt.setInt(1, a.getSerialNumber());
					updateLaptopToProcesorStmt.setInt(2, r.getHdd());
					count = updateLaptopToProcesorStmt.executeUpdate();
				}
			}
		}
		else {
			try {
				addLaptopStmt.setString(1, r.getBrand());
				addLaptopStmt.setString(2, r.getModel());
				addLaptopStmt.setInt(3, r.getHdd());
				addLaptopStmt.setInt(4, r.getRam());
				addLaptopStmt.executeUpdate();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (count == 0){
				addProcesorStmt.setString(1, a.getName());
				addProcesorStmt.setInt(2, a.getSerialNumber());
				addProcesorStmt.setString(3, a.getFrequency());
				addProcesorStmt.executeUpdate();
				updateLaptopToProcesorStmt.setInt(1, a.getSerialNumber());
				updateLaptopToProcesorStmt.setInt(2, r.getHdd());
				count = updateLaptopToProcesorStmt.executeUpdate();
			
		}
		connection.commit();
		connection.setAutoCommit(true);
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}
	
	public int deleteLaptopFromProcesor(Laptop r, Procesor a) {
		int count = 0;
		int resourceExists = 0;
		try {
		connection.setAutoCommit(false);
		ResultSet rsA = getAllLaptopsStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)r.getHdd()).equals((Integer)rsA.getInt("hdd"))){
				resourceExists = 1;
				break;
			}
		}
		if( resourceExists == 1 ){
			ResultSet rs = getAllProcesorsStmt.executeQuery();
			while (rs.next()){
				Procesor tmpA = new Procesor();
				tmpA.setSerialNumber(rs.getInt("serialnumber"));
				if(((Integer)tmpA.getSerialNumber()).equals(a.getSerialNumber())){
					deleteLaptopStmt.setInt(1, tmpA.getSerialNumber());
					deleteLaptopStmt.executeUpdate();
					addLaptopStmt.setString(1, r.getBrand());
					addLaptopStmt.setString(2, r.getModel());
					addLaptopStmt.setInt(3, r.getHdd());
					addLaptopStmt.setInt(4, r.getRam());
					count = addLaptopStmt.executeUpdate();
				}
			}
		}
		else {
			System.out.println("Laptop don't exists!!!");
		}
		if (count == 0){
			System.out.println("Procesor don't exists!!!");
		}
		connection.commit();
		connection.setAutoCommit(true);
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}
	
	public int selectLaptopFromProcesor(Procesor a) {
		int count = 0;
		int archiveExists = 0;
		try {
		connection.setAutoCommit(false);
		ResultSet rsA = getAllProcesorsStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)rsA.getInt("serialnumber")).equals((Integer)a.getSerialNumber())){
				archiveExists = 1;
				break;
			}
		}
		if( archiveExists == 1 ){
			ResultSet rs = getAllLaptopsStmt.executeQuery();
			while (rs.next()){
				Laptop tmpR = new Laptop();
				tmpR.setSerialNumber(rs.getInt("serialnumber"));
				if(((Integer)tmpR.getSerialNumber()).equals(a.getSerialNumber())){
					count ++;
				}
			}
		}
		else {
			System.out.println("Procesor don't exists!!!");
		}
		if (count == 0){
			System.out.println("Procesor don't have any Laptops!!!");
		}
		connection.commit();
		connection.setAutoCommit(true);
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}

	public int selectLaptopFromProcesorAfter(Procesor a, int tmpDate) {
		int count = 0;
		int archiveExists = 0;
		try {
		connection.setAutoCommit(false); 
		ResultSet rsA = getAllProcesorsStmt.executeQuery();
		while (rsA.next()){
			if(((Integer)rsA.getInt("serialnumber")).equals((Integer)a.getSerialNumber())){
				archiveExists = 1;
				break;
			}
		}
		if( archiveExists == 1 ){
			getAllLaptopsAfterStmt.setInt(1, tmpDate);
			ResultSet rs = getAllLaptopsAfterStmt.executeQuery();
			while (rs.next()){
				Laptop tmpR = new Laptop();
				tmpR.setSerialNumber(rs.getInt("serialnumber"));
				if(((Integer)tmpR.getSerialNumber()).equals(a.getSerialNumber())){
					count ++;
				}
			}
		}
		else {
			System.out.println("Procesor don't exists!!!");
		}
		if (count == 0){
			System.out.println("Procesor don't have any Laptop!!!");
		}
		//if (true) throw new SQLException("Bo mi siÄ™ nie podoba!");
		connection.commit();
		connection.setAutoCommit(true);
		} catch (SQLException e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		}
		return count;
	}
	
	public Connection getConnection() {
		return connection;
	}

	public void setConnection(Connection connection) {
		this.connection = connection;
	}
}
